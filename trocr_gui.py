"""
TrOCR GUI Application
–ö—Ä–∞—Å–∏–≤–æ–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–µ–π TrOCR
"""

import sys
import os
import json
import time
import threading
import subprocess
import platform
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional

import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Qt5Agg')
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
    QGridLayout, QTabWidget, QLabel, QPushButton, QComboBox, 
    QSpinBox, QProgressBar, QTextEdit, QFileDialog, QMessageBox,
    QGroupBox, QSplitter, QFrame, QScrollArea, QTableWidget, 
    QTableWidgetItem, QHeaderView, QCheckBox, QLineEdit
)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt5.QtGui import QFont, QPalette, QColor, QPixmap, QIcon

import qdarkstyle

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–π –ª–æ–≥–∏–∫–∏ TrOCR
from trocr_evaluation import TrOCREvaluator


class EvaluationWorker(QThread):
    """Worker thread –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –≤ —Ñ–æ–Ω–µ"""
    progress_updated = pyqtSignal(int, str)  # progress, status_text
    evaluation_completed = pyqtSignal(dict, dict)  # results, stats
    error_occurred = pyqtSignal(str)
    
    def __init__(self, evaluator, dataset_path, annotations_file, limit, results_folder):
        super().__init__()
        self.evaluator = evaluator
        self.dataset_path = dataset_path
        self.annotations_file = annotations_file
        self.limit = limit
        self.results_folder = results_folder
        self.is_running = True
    
    def run(self):
        try:
            self.progress_updated.emit(10, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...")
            
            if not self.is_running:
                return
                
            # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
            self.progress_updated.emit(30, "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            results = self.evaluator.evaluate_dataset(
                self.dataset_path, 
                self.annotations_file, 
                limit=self.limit
            )
            
            if not self.is_running:
                return
                
            self.progress_updated.emit(80, "–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            stats = self.evaluator.analyze_results(results)
            
            if not self.is_running:
                return
                
            self.progress_updated.emit(90, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –Ω–æ–≤—É—é –ø–∞–ø–∫—É
            self.save_results_to_folder(results, stats)
            
            if not self.is_running:
                return
                
            self.progress_updated.emit(100, "–û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            # –≠–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.evaluation_completed.emit(results, stats)
            
        except Exception as e:
            self.error_occurred.emit(str(e))
    
    def save_results_to_folder(self, results, stats):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–∞–ø–∫—É"""
        try:
            # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –≤ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ
            json_path = os.path.join(self.results_folder, "evaluation_results.json")
            csv_path = os.path.join(self.results_folder, "evaluation_results.csv")
            png_path = os.path.join(self.results_folder, "evaluation_plots.png")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.evaluator.save_results(results, stats, json_path)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            self.evaluator.plot_results(results, png_path, show=False)
            
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É: {self.results_folder}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            raise e
    
    def stop(self):
        self.is_running = False


class ResultsPlotWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    def __init__(self):
        super().__init__()
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout()
        
        # –°–æ–∑–¥–∞–µ–º matplotlib canvas
        self.figure = Figure(figsize=(12, 8))
        self.canvas = FigureCanvas(self.figure)
        
        layout.addWidget(self.canvas)
        self.setLayout(layout)
    
    def plot_results(self, results: Dict):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.figure.clear()
        
        # –°–æ–∑–¥–∞–µ–º 2x2 —Å–µ—Ç–∫—É –≥—Ä–∞—Ñ–∏–∫–æ–≤
        axes = self.figure.subplots(2, 2)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ WER
        axes[0, 0].hist(results['wer_scores'], bins=30, alpha=0.7, color='#3498db', edgecolor='black')
        axes[0, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ WER', fontsize=12, fontweight='bold')
        axes[0, 0].set_xlabel('WER (%)')
        axes[0, 0].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        axes[0, 0].grid(True, alpha=0.3)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ CER
        axes[0, 1].hist(results['cer_scores'], bins=30, alpha=0.7, color='#e74c3c', edgecolor='black')
        axes[0, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ CER', fontsize=12, fontweight='bold')
        axes[0, 1].set_xlabel('CER (%)')
        axes[0, 1].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        axes[0, 1].grid(True, alpha=0.3)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ WER –∏ CER
        axes[1, 0].scatter(results['wer_scores'], results['cer_scores'], 
                          alpha=0.6, color='#9b59b6', s=50)
        axes[1, 0].set_title('WER vs CER', fontsize=12, fontweight='bold')
        axes[1, 0].set_xlabel('WER (%)')
        axes[1, 0].set_ylabel('CER (%)')
        axes[1, 0].grid(True, alpha=0.3)
        
        # Box plot –º–µ—Ç—Ä–∏–∫
        data_for_box = [results['wer_scores'], results['cer_scores']]
        bp = axes[1, 1].boxplot(data_for_box, labels=['WER', 'CER'], patch_artist=True)
        bp['boxes'][0].set_facecolor('#3498db')
        bp['boxes'][1].set_facecolor('#e74c3c')
        axes[1, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫', fontsize=12, fontweight='bold')
        axes[1, 1].set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫')
        axes[1, 1].grid(True, alpha=0.3)
        
        self.figure.tight_layout()
        self.canvas.draw()


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__()
        self.evaluator = None
        self.current_results = None
        self.current_stats = None
        self.worker_thread = None
        self.start_time = None  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∫–∏
        self.current_results_folder = None  # –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        
        self.setup_ui()
        self.setup_connections()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("TrOCR Evaluation Tool")
        self.setGeometry(100, 100, 1400, 900)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QVBoxLayout(central_widget)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tab_widget = QTabWidget()
        main_layout.addWidget(self.tab_widget)
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.setup_settings_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.setup_results_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.setup_details_tab()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    def setup_settings_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        settings_widget = QWidget()
        layout = QVBoxLayout(settings_widget)
        
        # –ì—Ä—É–ø–ø–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        model_group = QGroupBox("–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
        model_layout = QGridLayout(model_group)
        
        model_layout.addWidget(QLabel("–ú–æ–¥–µ–ª—å TrOCR:"), 0, 0)
        self.model_combo = QComboBox()
        self.model_combo.addItems([
            "microsoft/trocr-base-handwritten",
            "microsoft/trocr-large-handwritten"
        ])
        model_layout.addWidget(self.model_combo, 0, 1)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        self.model_info_label = QLabel("Base –º–æ–¥–µ–ª—å: –±—ã—Å—Ç—Ä–µ–µ, –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä")
        self.model_info_label.setStyleSheet("color: #7f8c8d; font-style: italic;")
        model_layout.addWidget(self.model_info_label, 1, 1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏
        self.model_combo.currentTextChanged.connect(self.update_model_info)
        
        layout.addWidget(model_group)
        
        # –ì—Ä—É–ø–ø–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
        dataset_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞")
        dataset_layout = QGridLayout(dataset_group)
        
        dataset_layout.addWidget(QLabel("–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º:"), 0, 0)
        self.dataset_path_edit = QLineEdit("IAM/image")
        self.dataset_browse_btn = QPushButton("–û–±–∑–æ—Ä...")
        dataset_layout.addWidget(self.dataset_path_edit, 0, 1)
        dataset_layout.addWidget(self.dataset_browse_btn, 0, 2)
        
        dataset_layout.addWidget(QLabel("–§–∞–π–ª –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π:"), 1, 0)
        self.annotations_path_edit = QLineEdit("IAM/gt_test.txt")
        self.annotations_browse_btn = QPushButton("–û–±–∑–æ—Ä...")
        dataset_layout.addWidget(self.annotations_path_edit, 1, 1)
        dataset_layout.addWidget(self.annotations_browse_btn, 1, 2)
        
        dataset_layout.addWidget(QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:"), 2, 0)
        self.limit_spinbox = QSpinBox()
        self.limit_spinbox.setRange(1, 1000)
        self.limit_spinbox.setValue(50)
        dataset_layout.addWidget(self.limit_spinbox, 2, 1)
        
        layout.addWidget(dataset_group)
        
        # –ì—Ä—É–ø–ø–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        control_layout = QVBoxLayout(control_group)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        control_layout.addWidget(self.progress_bar)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        control_layout.addWidget(self.status_label)
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        
        self.start_btn = QPushButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É")
        self.start_btn.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                border: none;
                padding: 10px 20px;
                font-size: 14px;
                font-weight: bold;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #2ecc71;
            }
            QPushButton:pressed {
                background-color: #229954;
            }
        """)
        
        self.stop_btn = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.setEnabled(False)
        self.stop_btn.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 10px 20px;
                font-size: 14px;
                font-weight: bold;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #ec7063;
            }
        """)
        
        self.save_settings_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.save_settings_btn.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 10px 20px;
                font-size: 14px;
                font-weight: bold;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #5dade2;
            }
        """)
        
        self.load_settings_btn = QPushButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.load_settings_btn.setStyleSheet("""
            QPushButton {
                background-color: #9b59b6;
                color: white;
                border: none;
                padding: 10px 20px;
                font-size: 14px;
                font-weight: bold;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #bb8fce;
            }
        """)
        
        self.open_general_results_btn = QPushButton("üìÇ –û—Ç–∫—Ä—ã—Ç—å –æ–±—â—É—é –ø–∞–ø–∫—É results")
        self.open_general_results_btn.setStyleSheet("""
            QPushButton {
                background-color: #f39c12;
                color: white;
                border: none;
                padding: 10px 20px;
                font-size: 14px;
                font-weight: bold;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #f7dc6f;
            }
        """)
        
        button_layout.addWidget(self.start_btn)
        button_layout.addWidget(self.stop_btn)
        button_layout.addWidget(self.save_settings_btn)
        button_layout.addWidget(self.load_settings_btn)
        button_layout.addWidget(self.open_general_results_btn)
        button_layout.addStretch()
        
        control_layout.addLayout(button_layout)
        layout.addWidget(control_group)
        
        layout.addStretch()
        self.tab_widget.addTab(settings_widget, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    def setup_results_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        results_widget = QWidget()
        layout = QVBoxLayout(results_widget)
        
        # –°–æ–∑–¥–∞–µ–º splitter –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏
        splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –≥—Ä–∞—Ñ–∏–∫–∏
        self.plot_widget = ResultsPlotWidget()
        splitter.addWidget(self.plot_widget)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –º–µ—Ç—Ä–∏–∫–∏
        metrics_widget = QWidget()
        metrics_layout = QVBoxLayout(metrics_widget)
        
        # –ì—Ä—É–ø–ø–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        metrics_group = QGroupBox("–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        metrics_group_layout = QGridLayout(metrics_group)
        
        # –°–æ–∑–¥–∞–µ–º –ª–µ–π–±–ª—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫
        self.metrics_labels = {}
        metrics = [
            ("total_samples", "–û–±—Ä–∞–∑—Ü–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:"),
            ("mean_wer", "–°—Ä–µ–¥–Ω–∏–π WER:"),
            ("mean_cer", "–°—Ä–µ–¥–Ω–∏–π CER:"),
            ("mean_accuracy", "–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å (—Å–∏–º–≤–æ–ª—ã):"),
            ("mean_word_accuracy", "–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å (—Å–ª–æ–≤–∞):"),
            ("std_wer", "–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ WER:"),
            ("std_cer", "–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ CER:"),
            ("std_accuracy", "–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏:"),
            ("min_wer", "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π WER:"),
            ("max_wer", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π WER:"),
            ("min_accuracy", "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:"),
            ("max_accuracy", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:")
        ]
        
        for i, (key, label_text) in enumerate(metrics):
            metrics_group_layout.addWidget(QLabel(label_text), i, 0)
            value_label = QLabel("‚Äî")
            value_label.setStyleSheet("font-weight: bold; color: #3498db;")
            self.metrics_labels[key] = value_label
            metrics_group_layout.addWidget(value_label, i, 1)
        
        metrics_layout.addWidget(metrics_group)
        
        # –ì—Ä—É–ø–ø–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_group = QGroupBox("–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞")
        quality_layout = QVBoxLayout(quality_group)
        
        self.quality_label = QLabel("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        self.quality_label.setStyleSheet("font-size: 14px; padding: 10px;")
        self.quality_label.setWordWrap(True)
        quality_layout.addWidget(self.quality_label)
        
        metrics_layout.addWidget(quality_group)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        self.open_results_btn = QPushButton("üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
        self.open_results_btn.setEnabled(False)
        self.open_results_btn.setStyleSheet("""
            QPushButton {
                background-color: #e74c3c;
                color: white;
                border: none;
                padding: 15px 25px;
                font-size: 16px;
                font-weight: bold;
                border-radius: 8px;
            }
            QPushButton:hover {
                background-color: #ec7063;
            }
            QPushButton:disabled {
                background-color: #bdc3c7;
                color: #7f8c8d;
            }
        """)
        
        metrics_layout.addWidget(self.open_results_btn)
        metrics_layout.addStretch()
        
        splitter.addWidget(metrics_widget)
        splitter.setSizes([800, 400])
        
        layout.addWidget(splitter)
        self.tab_widget.addTab(results_widget, "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    def setup_details_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        details_widget = QWidget()
        layout = QVBoxLayout(details_widget)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        self.results_table = QTableWidget()
        self.results_table.setColumnCount(6)
        self.results_table.setHorizontalHeaderLabels([
            "–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", "WER (%)", "CER (%)", "–¢–æ—á–Ω–æ—Å—Ç—å (—Å–∏–º–≤–æ–ª—ã) (%)", "–¢–æ—á–Ω–æ—Å—Ç—å (—Å–ª–æ–≤–∞) (%)"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.results_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)
        header.setSectionResizeMode(1, QHeaderView.Stretch)
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(4, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(5, QHeaderView.ResizeToContents)
        
        layout.addWidget(self.results_table)
        self.tab_widget.addTab(details_widget, "üìã –î–µ—Ç–∞–ª–∏")
    
    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–ª–æ—Ç–æ–≤"""
        self.start_btn.clicked.connect(self.start_evaluation)
        self.stop_btn.clicked.connect(self.stop_evaluation)
        self.dataset_browse_btn.clicked.connect(self.browse_dataset)
        self.annotations_browse_btn.clicked.connect(self.browse_annotations)
        self.save_settings_btn.clicked.connect(self.save_settings)
        self.load_settings_btn.clicked.connect(self.load_settings)
        self.open_general_results_btn.clicked.connect(self.open_general_results_folder)
        self.open_results_btn.clicked.connect(self.open_results_folder)
    
    def update_model_info(self, model_name):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        if "base" in model_name:
            self.model_info_label.setText("Base –º–æ–¥–µ–ª—å: –±—ã—Å—Ç—Ä–µ–µ, –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä")
        elif "large" in model_name:
            self.model_info_label.setText("Large –º–æ–¥–µ–ª—å: —Ç–æ—á–Ω–µ–µ, –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä")
        else:
            self.model_info_label.setText("")
    
    def browse_dataset(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
        if folder:
            self.dataset_path_edit.setText(folder)
    
    def browse_annotations(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, 
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π", 
            "", 
            "Text files (*.txt);;JSON files (*.json)"
        )
        if file_path:
            self.annotations_path_edit.setText(file_path)
    
    def start_evaluation(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            model_name = self.model_combo.currentText()
            dataset_path = self.dataset_path_edit.text()
            annotations_file = self.annotations_path_edit.text()
            limit = self.limit_spinbox.value()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏
            if not os.path.exists(dataset_path):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {dataset_path}")
                return
            
            if not os.path.exists(annotations_file):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {annotations_file}")
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ü–µ–Ω—â–∏–∫
            self.status_label.setText("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...")
            self.evaluator = TrOCREvaluator(model_name)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI
            self.start_btn.setEnabled(False)
            self.stop_btn.setEnabled(True)
            self.progress_bar.setVisible(True)
            self.progress_bar.setValue(0)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.current_results_folder = self.create_results_folder(model_name)
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            import time
            self.start_time = time.time()
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ –æ—Ü–µ–Ω–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
            print("\n" + "="*60)
            print("üöÄ –ó–ê–ü–£–°–ö –û–¶–ï–ù–ö–ò –ú–û–î–ï–õ–ò TrOCR")
            print("="*60)
            print(f"üìä –ú–æ–¥–µ–ª—å: {model_name}")
            print(f"üìÅ –î–∞—Ç–∞—Å–µ—Ç: {dataset_path}")
            print(f"üìÑ –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {annotations_file}")
            print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {limit}")
            print(f"üìÇ –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {self.current_results_folder}")
            print("="*60)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º worker thread
            self.worker_thread = EvaluationWorker(
                self.evaluator, dataset_path, annotations_file, limit, self.current_results_folder
            )
            self.worker_thread.progress_updated.connect(self.update_progress)
            self.worker_thread.evaluation_completed.connect(self.evaluation_finished)
            self.worker_thread.error_occurred.connect(self.evaluation_error)
            self.worker_thread.start()
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")
            self.reset_ui()
    
    def stop_evaluation(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏"""
        if self.worker_thread and self.worker_thread.isRunning():
            self.worker_thread.stop()
            self.worker_thread.wait()
        
        self.reset_ui()
        self.status_label.setText("–û—Ü–µ–Ω–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def update_progress(self, value, status_text):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_bar.setValue(value)
        self.status_label.setText(status_text)
        self.statusBar().showMessage(status_text)
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∫–æ–Ω—Å–æ–ª—å
        print(f"üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å: {value}% - {status_text}")
    
    def evaluation_finished(self, results, stats):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏"""
        self.current_results = results
        self.current_stats = stats
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        self.update_metrics(stats)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        self.plot_widget.plot_results(results)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.update_results_table(results)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.tab_widget.setCurrentIndex(1)
        
        self.reset_ui()
        self.status_label.setText("–û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        self.open_results_btn.setEnabled(True)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ)
        self.print_results_to_console(results, stats)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
        self.show_quality_assessment(stats)
    
    def evaluation_error(self, error_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ—Ü–µ–Ω–∫–∏"""
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ: {error_message}")
        self.reset_ui()
        self.status_label.setText("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ")
    
    def reset_ui(self):
        """–°–±—Ä–æ—Å UI –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.progress_bar.setVisible(False)
        # –ù–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    
    def update_metrics(self, stats):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫"""
        for key, label in self.metrics_labels.items():
            if key in stats:
                if key == 'total_samples':
                    label.setText(str(stats[key]))
                else:
                    label.setText(f"{stats[key]:.2f}%")
    
    def update_results_table(self, results):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        num_rows = len(results['predictions'])
        self.results_table.setRowCount(num_rows)
        
        for i in range(num_rows):
            self.results_table.setItem(i, 0, QTableWidgetItem(results['ground_truths'][i]))
            self.results_table.setItem(i, 1, QTableWidgetItem(results['predictions'][i]))
            self.results_table.setItem(i, 2, QTableWidgetItem(f"{results['wer_scores'][i]:.2f}"))
            self.results_table.setItem(i, 3, QTableWidgetItem(f"{results['cer_scores'][i]:.2f}"))
            self.results_table.setItem(i, 4, QTableWidgetItem(f"{results['accuracy_scores'][i]:.2f}"))
            self.results_table.setItem(i, 5, QTableWidgetItem(f"{results['word_accuracy_scores'][i]:.2f}"))
    
    def show_quality_assessment(self, stats):
        """–ü–æ–∫–∞–∑ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
        mean_wer = stats['mean_wer']
        
        if mean_wer < 20:
            quality_text = "üü¢ <b>–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è!</b><br>–ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."
            color = "#27ae60"
        elif mean_wer < 40:
            quality_text = "üü° <b>–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è</b><br>–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è."
            color = "#f39c12"
        elif mean_wer < 60:
            quality_text = "üü† <b>–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ</b><br>–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–µ–º–ª–µ–º–æ, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏."
            color = "#e67e22"
        else:
            quality_text = "üî¥ <b>–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è</b><br>–ú–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥."
            color = "#e74c3c"
        
        self.quality_label.setText(quality_text)
        self.quality_label.setStyleSheet(f"font-size: 14px; padding: 10px; color: {color};")
    
    def print_results_to_console(self, results, stats):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ)"""
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–¶–ï–ù–ö–ò")
        print("="*60)
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {stats['total_samples']}")
        print("\n")
        print(f"üìâ –°—Ä–µ–¥–Ω–∏–π WER:        {stats['mean_wer']:.2f}%")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–π CER:        {stats['mean_cer']:.2f}%")
        print(f"üìä –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å (—Å–∏–º–≤–æ–ª—ã):   {stats['mean_accuracy']:.2f}%")
        print(f"üìä –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å (—Å–ª–æ–≤–∞):     {stats['mean_word_accuracy']:.2f}%")
        print("\n")
        print(f"üìâ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ WER: {stats['std_wer']:.2f}%")
        print(f"üìà –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ CER: {stats['std_cer']:.2f}%")
        print(f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏: {stats['std_accuracy']:.2f}%")
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        print(f"\nüéØ –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
        if stats['mean_wer'] < 20:
            print("üü¢ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è!")
        elif stats['mean_wer'] < 40:
            print("üü° –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        elif stats['mean_wer'] < 60:
            print("üü† –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
        else:
            print("üî¥ –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ WER –∏ CER
        if stats['mean_wer'] > 0:
            print(f"üìà CER –≤ {stats['mean_cer'] / stats['mean_wer']:.1f} —Ä–∞–∑ –ª—É—á—à–µ WER")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π WER: {stats['min_wer']:.2f}%")
        print(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π WER: {stats['max_wer']:.2f}%")
        print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {stats['min_accuracy']:.2f}%")
        print(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {stats['max_accuracy']:.2f}%")
        
        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if self.start_time:
            import time
            end_time = time.time()
            duration = end_time - self.start_time
            print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫—É–Ω–¥")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
        print(f"\nüíæ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
        if self.current_results_folder:
            print(f"üìÇ –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {self.current_results_folder}")
            print(f"üìÑ JSON: {os.path.join(self.current_results_folder, 'evaluation_results.json')}")
            print(f"üìä CSV:  {os.path.join(self.current_results_folder, 'evaluation_results.csv')}")
            print(f"üìà PNG:  {os.path.join(self.current_results_folder, 'evaluation_plots.png')}")
        else:
            print(f"üìÑ JSON: results/trocr_real_iam_evaluation.json")
            print(f"üìä CSV:  results/trocr_real_iam_evaluation.csv")
            print(f"üìà PNG:  results/evaluation_real_plots.png")
        
        print("\n" + "="*60)
        print("‚úÖ –û–¶–ï–ù–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("="*60)
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        settings = {
            'model_name': self.model_combo.currentText(),
            'dataset_path': self.dataset_path_edit.text(),
            'annotations_path': self.annotations_path_edit.text(),
            'limit': self.limit_spinbox.value()
        }
        
        file_path, _ = QFileDialog.getSaveFileName(
            self, 
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
            "trocr_settings.json", 
            "JSON files (*.json)"
        )
        
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(settings, f, ensure_ascii=False, indent=2)
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}")
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, 
            "–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
            "", 
            "JSON files (*.json)"
        )
        
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if 'model_name' in settings:
                    index = self.model_combo.findText(settings['model_name'])
                    if index >= 0:
                        self.model_combo.setCurrentIndex(index)
                
                if 'dataset_path' in settings:
                    self.dataset_path_edit.setText(settings['dataset_path'])
                
                if 'annotations_path' in settings:
                    self.annotations_path_edit.setText(settings['annotations_path'])
                
                if 'limit' in settings:
                    self.limit_spinbox.setValue(settings['limit'])
                
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {file_path}")
                
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")
    
    def create_results_folder(self, model_name: str) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –¥–∞—Ç–æ–π/–≤—Ä–µ–º–µ–Ω–µ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
        
        Args:
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
        """
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É results –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        results_base = Path("results")
        results_base.mkdir(exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        now = datetime.now()
        timestamp = now.strftime("%Y-%m-%d_%H-%M-%S")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model_short = model_name.split("/")[-1] if "/" in model_name else model_name
        model_short = model_short.replace("microsoft-", "").replace("trocr-", "")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        folder_name = f"{timestamp}_{model_short}"
        folder_path = results_base / folder_name
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
        folder_path.mkdir(exist_ok=True)
        
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {folder_path}")
        return str(folder_path)
    
    def open_results_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ"""
        if not self.current_results_folder:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è")
            return
        
        try:
            folder_path = Path(self.current_results_folder)
            if not folder_path.exists():
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder_path}")
                return
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
            if platform.system() == "Windows":
                os.startfile(str(folder_path))
            elif platform.system() == "Darwin":  # macOS
                subprocess.run(["open", str(folder_path)])
            else:  # Linux
                subprocess.run(["xdg-open", str(folder_path)])
            
            print(f"üìÇ –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {folder_path}")
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏: {e}")
    
    def open_general_results_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±—â–µ–π –ø–∞–ø–∫–∏ results"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É results –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            results_path = Path("results")
            results_path.mkdir(exist_ok=True)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
            if platform.system() == "Windows":
                os.startfile(str(results_path))
            elif platform.system() == "Darwin":  # macOS
                subprocess.run(["open", str(results_path)])
            else:  # Linux
                subprocess.run(["xdg-open", str(results_path)])
            
            print(f"üìÇ –û—Ç–∫—Ä—ã—Ç–∞ –æ–±—â–∞—è –ø–∞–ø–∫–∞ results: {results_path}")
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É results: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏ results: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = QApplication(sys.argv)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É
    app.setStyleSheet(qdarkstyle.load_stylesheet_pyqt5())
    
    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    window = MainWindow()
    window.show()
    
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
