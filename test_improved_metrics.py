"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ WER, CER –∏ Accuracy
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from trocr_evaluation import TrOCREvaluator

def test_metrics_calculation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ WER, CER –∏ Accuracy")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ü–µ–Ω—â–∏–∫–∞
    evaluator = TrOCREvaluator()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        {
            "name": "–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ",
            "reference": "Hello world",
            "hypothesis": "Hello world"
        },
        {
            "name": "–û–¥–Ω–∞ –∑–∞–º–µ–Ω–∞",
            "reference": "Hello world",
            "hypothesis": "Hello word"
        },
        {
            "name": "–û–¥–Ω–∞ –≤—Å—Ç–∞–≤–∫–∞",
            "reference": "Hello world",
            "hypothesis": "Hello the world"
        },
        {
            "name": "–û–¥–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ",
            "reference": "Hello world",
            "hypothesis": "Hello"
        },
        {
            "name": "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏",
            "reference": "The quick brown fox",
            "hypothesis": "The quik brown foks"
        },
        {
            "name": "–ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏",
            "reference": "",
            "hypothesis": ""
        },
        {
            "name": "–ü—É—Å—Ç–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞",
            "reference": "Hello world",
            "hypothesis": ""
        },
        {
            "name": "–ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞",
            "reference": "",
            "hypothesis": "Hello world"
        },
        {
            "name": "–†–∞–∑–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è",
            "reference": "Hello, World!",
            "hypothesis": "hello world"
        },
        {
            "name": "–õ–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã",
            "reference": "Hello   world",
            "hypothesis": "Hello world"
        }
    ]
    
    print(f"{'–¢–µ—Å—Ç':<25} {'WER':<8} {'CER':<8} {'Acc (—Å–∏–º–≤)':<12} {'Acc (—Å–ª–æ–≤–∞)':<12}")
    print("-" * 70)
    
    for test_case in test_cases:
        ref = test_case["reference"]
        hyp = test_case["hypothesis"]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        wer, cer, word_accuracy, char_accuracy = evaluator.calculate_metrics(ref, hyp)
        
        print(f"{test_case['name']:<25} {wer:<8.2f} {cer:<8.2f} {char_accuracy:<12.2f} {word_accuracy:<12.2f}")
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:")
    print("-" * 40)
    
    normalization_tests = [
        "  Hello,   World!  ",
        "HELLO WORLD",
        "hello world",
        "Hello, World!",
        "  Multiple    Spaces  "
    ]
    
    for text in normalization_tests:
        normalized = evaluator.normalize_text(text)
        print(f"'{text}' -> '{normalized}'")

def test_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    
    print("\nüö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤:")
    print("-" * 40)
    
    evaluator = TrOCREvaluator()
    
    edge_cases = [
        (None, None),
        (None, "test"),
        ("test", None),
        ("", ""),
        ("", "test"),
        ("test", ""),
        ("a" * 1000, "b" * 1000),  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        ("a", "b" * 100),  # –û—á–µ–Ω—å —Ä–∞–∑–Ω—ã–µ –¥–ª–∏–Ω—ã
    ]
    
    for i, (ref, hyp) in enumerate(edge_cases):
        try:
            wer, cer, word_acc, char_acc = evaluator.calculate_metrics(ref, hyp)
            print(f"–°–ª—É—á–∞–π {i+1}: WER={wer:.2f}, CER={cer:.2f}, WordAcc={word_acc:.2f}, CharAcc={char_acc:.2f}")
        except Exception as e:
            print(f"–°–ª—É—á–∞–π {i+1}: –û–®–ò–ë–ö–ê - {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        test_metrics_calculation()
        test_edge_cases()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
