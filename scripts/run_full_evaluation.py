"""
–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π –æ—Ü–µ–Ω–∫–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞
"""

import os
import sys
import subprocess
from pathlib import Path
import json
import time

def get_python_executable():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—É –∏–∑ venv, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ —Ç–µ–∫—É—â–∏–π."""
    # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç CUDA venv, –∑–∞—Ç–µ–º –æ–±—ã—á–Ω—ã–π venv, –∑–∞—Ç–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π
    venv_cuda_python = Path("venv_cuda") / "Scripts" / "python.exe"
    if venv_cuda_python.exists():
        return str(venv_cuda_python)
    venv_python = Path("venv") / "Scripts" / "python.exe"
    if venv_python.exists():
        return str(venv_python)
    return sys.executable

def run_script(script_name, description):
    """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å –≤—ã–≤–æ–¥–æ–º –æ–ø–∏—Å–∞–Ω–∏—è"""
    print(f"\n{'='*60}")
    print(f"{description}")
    print(f"{'='*60}")
    
    try:
        python_exec = get_python_executable()
        result = subprocess.run([python_exec, script_name], check=True)
        print(f"‚úì {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {script_name}: {e}")
        return False
    except FileNotFoundError:
        print(f"‚úó –§–∞–π–ª {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = [
        "trocr_evaluation.py",
        "requirements.txt"
    ]
    
    missing_files = []
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        print(f"‚úó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ venv_cuda –∏ venv)
    if not (Path("venv_cuda").exists() or Path("venv").exists()):
        print("‚úó –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_environment.py")
        return False
    
    print("‚úì –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ")
    return True

def check_dataset():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    
    dataset_paths = [
        "IAM/image"
    ]
    
    annotation_paths = [
        "IAM/gt_test.txt"
    ]
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∞—Ç–∞—Å–µ—Ç
    dataset_found = False
    annotation_found = False
    
    for dataset_path in dataset_paths:
        if Path(dataset_path).exists():
            print(f"‚úì –ù–∞–π–¥–µ–Ω –¥–∞—Ç–∞—Å–µ—Ç: {dataset_path}")
            dataset_found = True
            break
    
    for annotation_path in annotation_paths:
        if Path(annotation_path).exists():
            print(f"‚úì –ù–∞–π–¥–µ–Ω—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {annotation_path}")
            annotation_found = True
            break
    
    if not dataset_found or not annotation_found:
        print("‚Ñπ –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç")
        return False
    
    return True

def run_full_evaluation():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
    print("\n" + "="*60)
    print("–ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –û–¶–ï–ù–ö–ò TrOCR –ù–ê –î–ê–¢–ê–°–ï–¢–ï IAM")
    print("="*60)
    
    start_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_environment():
        print("\n–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
        print("python setup_environment.py")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    if not check_dataset():
        print("\n–î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ 'IAM/image' –∏ —Ñ–∞–π–ª –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –≤ 'IAM/gt_test.txt'.")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É –Ω–∞–ø—Ä—è–º—É—é
    print("\n" + "="*60)
    print("üöÄ –ó–ê–ü–£–°–ö –û–¶–ï–ù–ö–ò –ú–û–î–ï–õ–ò TrOCR")
    print("="*60)
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        import sys
        from pathlib import Path
        project_root = Path(__file__).parent.parent
        sys.path.insert(0, str(project_root))
        
        from trocr_evaluation import TrOCREvaluator
        import json
        from pathlib import Path
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –¥–∞—Ç–∞—Å–µ—Ç–∞
        dataset_path = "IAM/image"
        annotations_path = "IAM/gt_test.txt"
        
        if not (Path(dataset_path).exists() and Path(annotations_path).exists()):
            print("‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_files = [f for f in os.listdir(dataset_path) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
        
        if len(image_files) == 0:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏!")
            return False
        
        print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {min(50, len(image_files))} –∏–∑ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print("‚è±Ô∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω—â–∏–∫–∞
        evaluator = TrOCREvaluator()
        
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        
        # –û—Ü–µ–Ω–∫–∞ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ (–ø–µ—Ä–≤—ã–µ 50)
        results = evaluator.evaluate_dataset(dataset_path, annotations_path, limit=50)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        stats = evaluator.analyze_results(results)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        output_file = "results/trocr_real_iam_evaluation.json"
        evaluator.save_results(results, stats, output_file)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        evaluator.plot_results(results, "results/evaluation_real_plots.png", show=False)
        
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–¶–ï–ù–ö–ò")
        print("="*60)
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {stats['total_samples']}")
        print("\n")
        print(f"üìâ –°—Ä–µ–¥–Ω–∏–π WER:        {stats['mean_wer']:.2f}%")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–π CER:        {stats['mean_cer']:.2f}%")
        print(f"üìä –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å:   {stats['mean_accuracy']:.2f}%")
        print("\n")
        print(f"üìâ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ WER: {stats['std_wer']:.2f}%")
        print(f"üìà –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ CER: {stats['std_cer']:.2f}%")
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        print(f"\nüéØ –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
        if stats['mean_wer'] < 20:
            print("üü¢ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è!")
        elif stats['mean_wer'] < 40:
            print("üü° –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        elif stats['mean_wer'] < 60:
            print("üü† –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
        else:
            print("üî¥ –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        
        print(f"üìà CER –≤ {stats['mean_cer'] / stats['mean_wer']:.1f} —Ä–∞–∑ –ª—É—á—à–µ WER")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
        print(f"\nüíæ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
        print(f"üìÑ JSON: {output_file}")
        print(f"üìä CSV:  {output_file.replace('.json', '.csv')}")
        print(f"üìà PNG:  results/evaluation_real_plots.png")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ: {e}")
        return False
    
    end_time = time.time()
    duration = end_time - start_time
    
    print("\n" + "="*60)
    print("‚úÖ –û–¶–ï–ù–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("="*60)
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫—É–Ω–¥")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'results/'")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = run_full_evaluation()
        
        if success:
            print("\nüéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ.")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\n–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
