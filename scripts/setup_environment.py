"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (GPU/CPU auto)
"""

import subprocess
import sys
import os
from pathlib import Path
import shutil


def run_command(command, description, show_output=False):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º –æ–ø–∏—Å–∞–Ω–∏—è"""
    print(f"\n{description}...")
    try:
        if show_output:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤)
            result = subprocess.run(command, shell=True, check=True, text=True)
        else:
            # –°–∫—Ä—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ–º–∞–Ω–¥
            result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úì {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ {description.lower()}: {e}")
        if hasattr(e, 'stderr') and e.stderr:
            print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e.stderr}")
        if hasattr(e, 'stdout') and e.stdout:
            print(f"–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: {e.stdout}")
        return False


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 10):
        print("‚úó –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.10 –∏–ª–∏ –≤—ã—à–µ")
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
        return False
    else:
        print(f"‚úì Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
        return True


def create_virtual_environment():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è venv_cuda"""
    venv_path = Path("venv_cuda")

    if venv_path.exists():
        print("‚úì –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ venv_cuda —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True

    return run_command(f"{sys.executable} -m venv venv_cuda", "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è venv_cuda")


def get_pip_command():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è pip –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°"""
    if os.name == 'nt':  # Windows
        return "venv_cuda\\Scripts\\pip"
    else:  # Linux/macOS
        return "venv_cuda/bin/pip"


def get_python_command():
    if os.name == 'nt':
        return "venv_cuda\\Scripts\\python"
    else:
        return "venv_cuda/bin/python"


def detect_cuda_available():
    """–ì—Ä—É–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è CUDA (–ø–æ nvidia-smi)."""
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if os.environ.get("FORCE_CPU", "").lower() in ("1", "true", "yes"):
        return False
    nvidia_smi = shutil.which("nvidia-smi")
    return nvidia_smi is not None


def install_pytorch_auto():
    """–ê–≤—Ç–æ-—É—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch: CUDA (cu121) –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ CPU.
    –ü–æ—Ä—è–¥–æ–∫:
      1) –æ–±–Ω–æ–≤–∏—Ç—å pip
      2) –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å CUDA –∫–æ–ª–µ—Å–∞
      3) –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–∫–∞—Ç–∏—Ç—å—Å—è –Ω–∞ CPU
    """
    pip_cmd = get_pip_command()
    # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏–º pip –∏ wheel/setuptools
    if not run_command(f"{pip_cmd} install --upgrade pip setuptools wheel", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip/setuptools/wheel", show_output=True):
        return False

    wants_cuda = detect_cuda_available()
    if wants_cuda:
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Å NVIDIA (nvidia-smi –Ω–∞–π–¥–µ–Ω). –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyTorch CUDA (cu121)...")
        if run_command(
            f"{pip_cmd} install --index-url https://download.pytorch.org/whl/cu121 torch torchvision",
            "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch CUDA (cu121)",
            show_output=True
        ):
            return True
        else:
            print("‚Ñπ –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å CUDA-–≤–µ—Ä—Å–∏—é PyTorch. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ CPU-–≤–∞—Ä–∏–∞–Ω—Ç...")

    # CPU –≤–∞—Ä–∏–∞–Ω—Ç —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ PyTorch
    return run_command(
        f"{pip_cmd} install --index-url https://download.pytorch.org/whl/cpu torch torchvision",
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch CPU",
        show_output=True
    )


def install_requirements():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    pip_cmd = get_pip_command()
    return run_command(f"{pip_cmd} install -r requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt", show_output=True)


def test_installation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")

    try:
        import torch
        import transformers
        import jiwer
        import PIL
        import numpy as np
        import pandas as pd
        import matplotlib
        import seaborn
        import tqdm
        import sklearn
        import cv2
        import easyocr

        print("‚úì –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
        if torch.cuda.is_available():
            try:
                device_name = torch.cuda.get_device_name(0)
            except Exception:
                device_name = "CUDA GPU"
            print(f"‚úì CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {device_name} (cuda {torch.version.cuda})")
        else:
            print("‚Ñπ CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º EasyOCR (–±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Reader –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–∞–º—è—Ç–∏)
        try:
            import easyocr
            print("‚úì EasyOCR –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ (Reader –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)")
        except Exception as e:
            print(f"‚úó –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–º–ø–æ—Ä—Ç–æ–º EasyOCR: {e}")
            return False

        return True

    except ImportError as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


def create_project_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\n–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")

    directories = [
        "results"
    ]

    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("="*60)
    print("–ù–ê–°–¢–†–û–ô–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø –î–õ–Ø AiTextOCR (GPU/CPU)")
    print("="*60)

    if not check_python_version():
        sys.exit(1)

    if not create_virtual_environment():
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é:")
        print(f"   {sys.executable} -m venv venv_cuda")
        print("–ó–∞—Ç–µ–º –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é:")
        if os.name == 'nt':
            print("   .\\venv_cuda\\Scripts\\activate")
        else:
            print("   source venv_cuda/bin/activate")
        print("   pip install -r requirements.txt")
        sys.exit(1)

    if not install_pytorch_auto():
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyTorch")
        print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("- –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print("- –ü—Ä–æ–±–ª–µ–º—ã —Å pip –∏–ª–∏ setuptools")
        print("- –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π")
        print("\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é:")
        print("1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PyTorch: pip install torch torchvision")
        sys.exit(1)

    if not install_requirements():
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é:")
        print("1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ –æ–¥–Ω–æ–π: pip install <package>==<version>")
        print("   –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ —Å–º. –≤ requirements.txt")
        sys.exit(1)

    if not test_installation():
        print("\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π")
        print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å—ë –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
        print("–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –æ—à–∏–±–∫–∏, –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –≤—Ä—É—á–Ω—É—é.")

    create_project_structure()

    print("\n" + "="*60)
    print("‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("="*60)

    print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
    if os.name == 'nt':
        print("   .\\venv_cuda\\Scripts\\Activate.ps1  # PowerShell")
        print("   .\\venv_cuda\\Scripts\\activate.bat  # CMD")
    else:
        print("   source venv_cuda/bin/activate")

    print("\n2. –ó–∞–ø—É—Å–∫ GUI:")
    print("   python run_gui.py")
    print("\n3. –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏:")
    print("   python scripts/run_full_evaluation.py")
    
    print("\nüí° –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("   - –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: pip install <package> --force-reinstall")
    print("   - –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑–¥–µ–ª—É '–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º' –≤ README.md")


if __name__ == "__main__":
    main()
